#!/usr/bin/env bash
# CONSTANTS
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
DOCKERIZED_ROOT=$(dirname "$SCRIPT_DIR")
DOCKERIZED_COMPOSE_FILE="${DOCKERIZED_ROOT}/docker-compose.yml"
DOCKERIZED_BINARY="${DOCKERIZED_ROOT}/build/dockerized"

# region COMPILE DOCKERIZED
DOCKERIZED_COMPILE=
if [ "$1" == "--compile" ]; then
  DOCKERIZED_COMPILE=1
  shift
fi

case "$OSTYPE" in
msys | cygwin)
  GOOS=windows
  PWD_ARGS="-W"
  ;;
darwin*)
  GOOS=darwin
  ;;
# Operating systems below not tested. Logic based on:
#  - https://github.com/dylanaraps/neofetch/issues/433
#  - https://gist.github.com/asukakenji/f15ba7e588ac42795f421b48b8aede63
openbsd*)
  GOOS=openbsd
  ;;
freebsd*)
  GOOS=freebsd
  ;;
netbsd*)
  GOOS=netbsd
  ;;
solaris*)
  GOOS=solaris
  ;;
# default
*)
  GOOS=linux
  ;;
esac

case "$(uname -m)" in
x86_64)
  GOARCH=amd64
  ;;
i*86)
  GOARCH=386
  ;;

esac

if [ $DOCKERIZED_COMPILE ] || [ ! -f "$DOCKERIZED_BINARY" ]; then
  echo "Compiling dockerized..." >&2
  (
    cd "$DOCKERIZED_ROOT"
    echo docker run \
      --rm \
      --entrypoint=go \
      -e "GOOS=${GOOS}" \
      -v "$(pwd $PWD_ARGS):/src" \
      -v "$(pwd $PWD_ARGS)/build:/build" \
      -v "$(pwd $PWD_ARGS)/.cache:/go/pkg" \
      -w //src \
      "golang:1.17.8" \
      build -o //build/ lib/dockerized.go
  )

  if [ $? -ne 0 ]; then
    echo "Failed to compile dockerized" >&2
    exit 1
  fi

  if [ $# -eq 0 ]; then
    echo "Compiled dockerized" >&2
    exit 0
  fi
fi
# endregion

# RUN DOCKERIZED:
"$DOCKERIZED_BINARY" "$@"
