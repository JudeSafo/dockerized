#!/usr/bin/env bash
# CONSTANTS
DOCKERIZED_ENV_FILE_NAME="dockerized.env"
DOCKERIZED_ROOT=$(realpath $(dirname "$BASH_SOURCE")/..)
DOCKERIZED_COMPOSE_FILE="${DOCKERIZED_ROOT}/docker-compose.yml"
DOCKERIZED_ENV_FILE="${DOCKERIZED_ROOT}/${DOCKERIZED_ENV_FILE_NAME}"
HOST_HOME="$HOME"

# OPTIONS
DOCKERIZED_OPT_VERBOSE=

# RUNTIME VARIABLES
HOST_PWD=
HOST_HOSTNAME=$(hostname)
HOST_DIR_NAME=$(basename "$PWD")
HOST_DIR_NAME=${HOST_DIR_NAME%/}
SERVICE_NAME=
SERVICE_ARGS=

case "$(uname -s)" in
CYGWIN* | MINGW32* | MSYS* | MINGW*)
  HOST_PWD=$(pwd -W)
  GOOS=windows
  DOCKERIZED_BINARY="build/dockerized.exe"
  ;;
*)
  HOST_PWD=$(pwd)
  DOCKERIZED_BINARY="build/dockerized"
  ;;
esac

case "$(uname -m)" in
  x86_64)
    GOARCH=amd64
    ;;
  i*86)
    GOARCH=386
    ;;
esac

function dotenv() {
  FILE="$1"

  if [ ! -f "$FILE" ]; then
    return
  fi

  if [ "$DOCKERIZED_OPT_VERBOSE" ]; then
    echo -e "\033[0;32mLoading environment from $FILE\033[0m"
  fi

  set -o allexport
  source "$FILE"
  set +o allexport
}

function findUp() {
  local FILE="$1"
  local DIR="$2"
  while [ ! -f "$DIR/$FILE" ]; do
    DIR=$(dirname "$DIR")
    if [ "$(realpath "$DIR")" == "$(realpath "$(dirname "$DIR")")" ]; then
      return 1
    fi
  done
  echo "$DIR/$FILE"
}

function loadEnvironment() {
  local CUSTOM_ENV_FILE=$(findUp "$DOCKERIZED_ENV_FILE_NAME" "$HOST_PWD")
  dotenv "$HOME/$DOCKERIZED_ENV_FILE_NAME"
  dotenv "$CUSTOM_ENV_FILE"
}

loadEnvironment

DOCKERIZED_COMPILE=
if [ "$1" == "--compile" ]; then
  DOCKERIZED_COMPILE=1
  shift
fi

if [ $DOCKERIZED_COMPILE ] || [ ! -f "$DOCKERIZED_ROOT/$DOCKERIZED_BINARY" ]; then
  echo "$DOCKERIZED_ROOT/build/$DOCKERIZED_BINARY"
  docker-compose \
   -f "$DOCKERIZED_COMPOSE_FILE" \
   run --rm \
   -e "GOOS=$GOOS" \
   _compile
fi

"$DOCKERIZED_ROOT/build/dockerized" "$@"
